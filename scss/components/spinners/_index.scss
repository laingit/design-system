// Lightning Design System 2.3.0-beta.2
// Copyright (c) 2015-present, salesforce.com, inc. All rights reserved
// Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license

/**
 * To use the spinner in a component, the parent of the spinner should be set to `position:relative`. You can use the utility class `.slds-is-relative` or add the declaration to your custom component CSS. If you are using the spinner in an `iframe` and dynamically loading DOM nodes after the page has loaded, it is recommended that you set the `.slds-spinner_container` to `position:fixed` so that it remains centered in the viewport.
 *
 * The background overlay for the spinner is an optional element.
 *
 * #### Accessibility
 *
 * A spinner should have the Aria `role="status"` and contain assistive text that explains what is currently happening.
 *
 * @summary Spinners are CSS loading indicators that should be shown when retrieving data or performing slow computations. In some cases, the first time a parent component loads, a stencil is preferred to indicate network activity.
 *
 * @base
 * @name spinners
 * @selector .slds-spinner
 * @support dev-ready
 * @category feature
 * @type loading
 * @role alert
 */

.slds-spinner_container {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: calc(#{$z-index-modal} + 2);
  background-color: $color-background-temp-modal-tint-alt;
  visibility: visible;
  opacity: 1;
  transition: opacity 0.2s ease, visibility 0s;
  transition-delay: 0s, 0.3s;
}

/* Follow production class names (not starting with slds-) */
/* stylelint-disable selector-class-pattern */
.slds-spinner_container.is-hidden {
  visibility: hidden;
  opacity: 0;
  transition: opacity 0.2s ease, visibility 0s;
  transition-delay: 0s, 0s;
}

.slds-spinner_container.hide {
  display: none;
}
/* stylelint-enable selector-class-pattern */

/**
 * This is the gray base class for spinner
 *
 * @name sizes
 * @selector .slds-spinner
 * @restrict div
 * @variant
 */

.slds-spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) rotate(90deg);
}

.slds-spinner,
.slds-spinner__dot-a,
.slds-spinner__dot-b {
  transform-origin: 50% 50%;
}

/**
 * This creates two of the circles
 *
 * @selector .slds-spinner__dot-a
 * @restrict .slds-spinner div
 * @required
 */

/**
 * This creates two of the circles
 *
 * @selector .slds-spinner__dot-b
 * @restrict .slds-spinner div
 * @required
 */

.slds-spinner__dot-a,
.slds-spinner__dot-b {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
}

.slds-spinner:before,
.slds-spinner:after,
.slds-spinner__dot-a:before,
.slds-spinner__dot-b:before,
.slds-spinner__dot-a:after,
.slds-spinner__dot-b:after {
  position: absolute;
  content: '';
  background: $color-background-spinner-dot;
  border-radius: $border-radius-circle;
  animation-duration: 1000ms;
  animation-iteration-count: infinite;
}

.slds-spinner__dot-a {
  transform: rotate(60deg) translateY(0);
}

.slds-spinner__dot-b {
  transform: rotate(120deg) translateY(0);
}

.slds-spinner:before {
  animation-delay: -83.33333ms;
}

.slds-spinner__dot-a:before {
  animation-delay: 83.33333ms;
}

.slds-spinner__dot-b:before {
  animation-delay: 250ms;
}

.slds-spinner:after {
  animation-delay: 416.66667ms;
}

.slds-spinner__dot-a:after {
  animation-delay: 583.33333ms;
}

.slds-spinner__dot-b:after {
  animation-delay: 750ms;
}
